name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: mq-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: mq-linux-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: mq-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: mq-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: mq-windows-x86_64.exe

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install protoc
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install protoc (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install protobuf

      - name: Install protoc (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install protoc

      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }}
          mkdir -p dist
          cp target/${{ matrix.target }}/release/mq-server dist/mq-server-${{ matrix.artifact_name }}
          cp target/${{ matrix.target }}/release/mq-client dist/mq-client-${{ matrix.artifact_name }}
          cp target/${{ matrix.target }}/release/mq-monitoring dist/mq-monitoring-${{ matrix.artifact_name }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/mq-linux-x86_64/mq-server-mq-linux-x86_64
          asset_name: mq-server-linux-x86_64
          asset_content_type: application/octet-stream

      - name: Upload Release Assets (Linux ARM64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/mq-linux-aarch64/mq-server-mq-linux-aarch64
          asset_name: mq-server-linux-aarch64
          asset_content_type: application/octet-stream

      - name: Upload Release Assets (macOS x86_64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/mq-macos-x86_64/mq-server-mq-macos-x86_64
          asset_name: mq-server-macos-x86_64
          asset_content_type: application/octet-stream

      - name: Upload Release Assets (macOS ARM64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/mq-macos-aarch64/mq-server-mq-macos-aarch64
          asset_name: mq-server-macos-aarch64
          asset_content_type: application/octet-stream

      - name: Upload Release Assets (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/mq-windows-x86_64.exe/mq-server-mq-windows-x86_64.exe
          asset_name: mq-server-windows-x86_64.exe
          asset_content_type: application/octet-stream 