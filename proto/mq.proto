syntax = "proto3";

package mq;

service MessageQueueService {
    rpc Publish (PublishRequest) returns (PublishResponse);
    rpc Subscribe (SubscribeRequest) returns (stream Message);
    rpc CreateTopic (CreateTopicRequest) returns (CreateTopicResponse);
    rpc CommitOffset (CommitOffsetRequest) returns (CommitOffsetResponse);
}

message PublishRequest {
    string topic = 1;
    bytes payload = 2;
    map<string, string> headers = 3;
    optional uint32 partition = 4;  // Optional partition to publish to
    optional bool dlq = 5;                  // Publish directly to DLQ
}

message PublishResponse {
    string message_id = 1;
}

message SubscribeRequest {
    string topic = 1;
    optional uint32 partition = 2;  // Optional partition to subscribe to
    optional uint64 replay_offset = 3;      // For message replay by offset
    optional int64 replay_timestamp = 4;    // For message replay by timestamp
    optional bool dlq = 5;                  // Subscribe to DLQ
}

message Message {
    string id = 1;
    string topic = 2;
    bytes payload = 3;
    int64 timestamp = 4;
    map<string, string> headers = 5;
}

message CreateTopicRequest {
    string name = 1;
    optional uint32 partition_count = 2;  // Optional number of partitions
    optional uint64 max_age_seconds = 3;  // Time-based retention
    optional uint64 max_size_bytes = 4;   // Size-based retention
}

message CreateTopicResponse {
    bool success = 1;
}

message CommitOffsetRequest {
    string topic = 1;
    uint32 partition = 2;  // Required partition
    uint64 offset = 3;
}

message CommitOffsetResponse {
    bool success = 1;
} 